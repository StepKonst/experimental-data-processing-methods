import os
import sys

import numpy as np
import streamlit as st
from st_pages import add_page_title, show_pages_from_config

sys.path.append(os.path.join(os.path.dirname(__file__), "../.."))

import analysis
import model
import processing
from analysis import utils as analysis_utils
from model import utils as model_utils

model = model.Model()
analysis = analysis.Analysis()
processing = processing.Processing()

add_page_title()
show_pages_from_config()


def main():
    file_path = "files/v36.bin"
    data = np.fromfile(file_path, dtype=np.float32)

    st.subheader("–ì—Ä–∞—Ñ–∏–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
    model_utils.plot_line_chart(
        param1=range(len(data)),
        param2=data,
        x_label="–í—Ä–µ–º—è",
        y_label="–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞",
        color="dodgerblue",
        width=2,
    )

    st.subheader("–ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ analysis.antispike()")
    st.markdown(
        """–î–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ùë•ùëò, 
        –≤—ã—Ö–æ–¥—è—â–∏—Ö –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ R 
        –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–µ–π—à–∏–π 3-—Ö—Ç–æ—á–µ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ª–∏–Ω–µ–π–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏"""
    )
    range_noise = st.number_input(
        "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–æ–∑–æ–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ —à—É–º–∞", value=10
    )
    anti_spike_noise = processing.antispike(data, range_noise)
    model_utils.plot_line_chart(
        range(len(anti_spike_noise)),
        anti_spike_noise,
        "–í—Ä–µ–º—è",
        "–ó–Ω–∞—á–µ–Ω–∏–µ –∞–¥–¥–∏—Ç–∏–≤–Ω–æ–∏ÃÜ –º–æ–¥–µ–ª–∏",
        "dodgerblue",
        width=2,
    )

    st.subheader("–ü—Ä–æ–≤–µ—Ä–∏–º, –ª–∏–Ω–µ–π–Ω—ã–π –ª–∏ —Ç—É—Ç —Ç—Ä–µ–Ω–¥...")
    st.markdown(
        """–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é antisihift(), –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ 
        —É–¥–∞–ª–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö data –ø—É—Ç–µ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è 
        (—Ü–µ–Ω—Ç—Ä–∞ —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è) –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è –µ–≥–æ –∏–∑ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö."""
    )
    check_on_linear = processing.antishift(anti_spike_noise)
    model_utils.plot_line_chart(
        range(len(check_on_linear)),
        check_on_linear,
        "–í—Ä–µ–º—è",
        "–ó–Ω–∞—á–µ–Ω–∏–µ",
        "dodgerblue",
        width=2,
    )

    st.subheader(
        "–ù—É–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω–∏–º processing.antitrendnonlinear()"
    )
    st.markdown(
        "–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø—É—Ç–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –¥–∞–Ω–Ω—ã—Ö data"
    )
    process = processing.antitrendnonlinear(anti_spike_noise, W=10)[:980]
    model_utils.plot_line_chart(
        range(len(process)), process, "–í—Ä–µ–º—è", "–ó–Ω–∞—á–µ–Ω–∏–µ", "dodgerblue", width=2
    )
    bpf = processing.bpf(fc1=219, fc2=221, m=128, dt=0.0005)

    spectr = analysis.spectr_fourier(process, dt=0.0005)
    st.subheader("–ì—Ä–∞—Ñ–∏–∫ –∞–º–ø–ª–∏—Ç—É–¥–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ –§—É—Ä—å–µ")
    analysis_utils.plot_fourier_spectrum(spectr, "–ß–∞—Å—Ç–æ—Ç–∞", "–ê–º–ø–ª–∏—Ç—É–¥–∞", "dodgerblue")

    data_filter = model.convol_model(process, bpf, len(process), 2 * 64 + 1)

    convolution_bsf_furier = analysis.fourier_proc(data_filter)
    st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Å–ø–µ–∫—Ç—Ä–∞ –§—É—Ä—å–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    model_utils.plot_line_chart(
        param1=range(len(convolution_bsf_furier) // 2),
        param2=convolution_bsf_furier[: len(convolution_bsf_furier) // 2],
        x_label="–ß–∞—Å—Ç–æ—Ç–∞",
        y_label="–ê–º–ø–ª–∏—Ç—É–¥–∞",
        color="dodgerblue",
        width=1,
    )

    st.subheader("–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞")
    model_utils.plot_line_chart(
        param1=np.arange(len(data_filter)),
        param2=data_filter,
        x_label="–§—Ä–µ–π–º—ã",
        y_label="–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞",
        color="dodgerblue",
        width=2,
    )

    statistical_characteristics = analysis.statistics(np.array(data_filter))
    model_utils.get_dataframe(statistical_characteristics)


if __name__ == "__main__":
    main()
